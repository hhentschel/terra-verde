<!-- Template: {{ _self }}.twig -->
{#
Outputs address form fields for editing an address.
#}
{% set showPrimaryCheckboxes = showPrimaryCheckboxes is defined ? showPrimaryCheckboxes : false %}
{% set addressFieldLayout = craft.app.getAddresses().getLayout() %}
{% set addressCustomFields = addressFieldLayout.getCustomFields()|filter(f => className(f) == 'craft\\fields\\PlainText') %}
{# @var address \craft\elements\Address #}
{% set addressName = addressName is defined ? addressName : '' %}
{% set showLabelField = showLabelField is defined ? showLabelField : false %}

{# @var primaryBillingAddress \craft\commerce\models\Address #}
{# {% set primaryBillingAddress = currentUser.getPrimaryBillingAddress() %} #}
{# @var primaryShippingAddress \craft\commerce\models\Address #}
{# {% set primaryShippingAddress = currentUser.getPrimaryShippingAddress() %} #}


{# Define a simple a Twig macro for outputting validation errors and making template less redundant #}
{% macro displayErrors(address, fieldName) %}
  {% if address and address.getErrors(fieldName) %}
    <div class="red error">{{ address.getErrors(fieldName)|join }}</div>
  {% endif %}
{% endmacro %}

<div>

  {% if showPrimaryCheckboxes %}
    <div class="selection--checkbox">
      {{ hiddenInput('isPrimaryBilling', 0) }}
      <label>
        {{ input('checkbox', 'isPrimaryBilling', 1, {
          checked: address.isPrimaryBilling,
          class: ''
        }) }}
        {{ 'Use as the primary billing address'|t('commerce') }}
      </label>
    </div>

    <div class="selection--checkbox">
      {{ hiddenInput('isPrimaryShipping', 0) }}

      {{ input('checkbox', 'isPrimaryShipping', 1, {
        checked: address.isPrimaryShipping,
        class: ''
      }) }}
      <label>
        {{ 'Use as the primary shipping address'|t('commerce') }}
      </label>
    </div>
  {% endif %}

  <hr class="form-item">

  <div class="form-adress">

    {# First and last name fields #}
    {# <div class="form-adress__item {{ not showLabelField ? 'hidden' : '' }}">
      <label for="title">
        {{- 'Address Label'|t -}}
      </label>
      {{ input('text', 'title', address ? address.title : '', {
        id: 'title',
        class: ['input']
      }) }}
      {{ _self.displayErrors(address, 'title') }}
    </div> #}
    {% set countries = craft.commerce.store.store.getCountriesList() %}
    {% set countryCode = address.countryCode ?? null %}

    <div class="form-adress__item {{ 'js-address-field'|namespaceInputId(addressName) }}">
      <label for="fullName">
        {{- 'Full Name'|t -}}
      </label>
      {{ input('text', 'fullName', address.fullName ?? '', {
        id: 'fullName',
        class: ['input']
      }) }}
      {{ _self.displayErrors(address, 'fullName') }}
    </div>


    <div class="form-adress__item {{ 'js-address-field'|namespaceInputId(addressName) }}">
      <label for="organization">
        {{- 'Organization'|t -}}
      </label>
      {{ input('text', 'organization', address ? address.organization : '', {
        id: 'organization',
        class: ['input']
      }) }}
      {{ _self.displayErrors(address, 'organization') }}
    </div>

    <div class=" form-adress__item {{ 'js-address-field'|namespaceInputId(addressName) }}">
      <label for="addressLine1">
        {{- 'Address 1'|t -}}
      </label>
      {{ input('text', 'addressLine1', address.addressLine1 ?? '', {
        id: 'addressLine1',
        class: ['input']
      }) }}
      {{ _self.displayErrors(address, 'addressLine1') }}
    </div>

    {# City, state, and postal code fields #}

    <div class="form-adress__item {{ 'js-address-field'|namespaceInputId(addressName) }}">
      <label for="locality">
        {{- 'City'|t -}}
      </label>
      {{ input('text', 'locality', address.locality ?? '', {
        id: 'locality',
        class: ['input']
      }) }}
      {{ _self.displayErrors(address, 'locality') }}
    </div>

    <div class="form-adress__item {{ 'js-address-field'|namespaceInputId(addressName) }}">
      {% set zipCode = address.postalCode ?? '' %}
      <label for="zipCode">
        {{- 'Postal Code'|t -}}
      </label>
      {{ input('text', 'postalCode', address.postalCode ?? '', {
        id: 'postalCode',
        class: ['input']
      }) }}
      {{ _self.displayErrors(address, 'postalCode') }}
    </div>

    <div class="form-adress__item">
      <label for="countryCode">
        {{- 'Country'|t }} *
      </label>
      {% tag 'select' with {
        id: 'countryCode',
        name: 'countryCode',
        class: ['input', countries|length == 0 ? 'hidden' : ''],
      } %}
        {{ tag('option', {
          value: '',
          disabled: true,
          selected: countryCode is empty,
          text: 'Select country'|t ~ '...'
        }) }}
        {% for key, option in countries %}
          {% set optionValue = (countryCode ?: '') %}
          {{ tag('option', {
            value: key,
            selected: key == optionValue,
            text: option
          }) }}
        {% endfor %}
      {% endtag %}
      {{ _self.displayErrors(address, 'countryCode') }}
    </div>

    {% if addressCustomFields|length %}

      <div
        class="form-adress__item {{ 'js-address-custom-fields'|namespaceInputId(addressName) }} {{ 'js-address-field'|namespaceInputId(addressName) }}">

        {% for customField in addressCustomFields %}
          <div>
            <label for="custom-field-{{ customField.handle }}">
              {{ customField.name }}
            </label>
            {{ input('text', 'fields[' ~ customField.handle ~ ']', address ? address[customField.handle] : '', {
              id: 'custom-field-' ~ customField.handle,
              class: ['input']
            }) }}
            {{ _self.displayErrors(address, customField.handle) }}
          </div>
        {% endfor %}
      </div>
    {% endif %}

  </div>

</div>

{% js %}
  {% if showPrimaryCheckboxes %}
    document.querySelectorAll('input[type=checkbox][data-primary-input]').forEach(el => {
    el.addEventListener('change', ev => {
    let primaryInput = document.querySelector(`input[name="${ev.target.dataset.primaryInput}"]`);
    if (ev.target.checked) {
    primaryInput.value = 1;
    } else {
    primaryInput.value = 0;
    }
    });
    });
  {% endif %}

  document.querySelector('select#{{ 'countryCode'|namespaceInputId(addressName) }}').addEventListener('change', ev => {
  const countryCode = ev.target.value;
  const stateSelect = document.querySelector('select#{{ 'administrativeArea'|namespaceInputId(addressName) }}');
  const stateText = document.querySelector('#{{ 'administrativeArea'|namespaceInputId(addressName) }}[type=text]');
  const $customFieldsContainer = document.querySelector('.{{ 'js-address-custom-fields'|namespaceInputId(addressName) }}');
  stateSelect.innerHTML = '';

  hideAddressFields('{{ 'placeHolder'|namespaceInputId(addressName) }}');

  if (countryCode && usedAddressFieldsByCountryCode[countryCode]) {
  usedAddressFieldsByCountryCode[countryCode].forEach(usedField => {
  showAddressField(usedField, '{{ 'placeHolder'|namespaceInputId(addressName) }}');
  });
  }

  if ($customFieldsContainer) {
  if (countryCode) {
  $customFieldsContainer.classList.remove('hidden');
  } else {
  $customFieldsContainer.classList.add('hidden');
  }
  }

  if (states[countryCode] && Object.keys(states[countryCode]).length) {
  stateSelect.classList.remove('hidden');
  stateSelect.setAttribute('name', '{{ addressName ? 'administrativeArea'|namespaceInputName(addressName) : 'administrativeArea' }}');
  stateText.classList.add('hidden');
  stateText.removeAttribute('name');
  stateSelect.innerHTML = '
  <option value="">Select state...</option>';
  for (const key in states[countryCode]) {
  let selected = (key == stateSelect.dataset.selected) ? 'selected' : '';
  stateSelect.innerHTML += `
  <option value="${key}" ${selected}>${states[countryCode][key]}</option>`;
  }
  } else {
  stateSelect.classList.add('hidden');
  stateSelect.removeAttribute('name');
  stateText.classList.remove('hidden');
  stateText.setAttribute('name', '{{ addressName ? 'administrativeArea'|namespaceInputName(addressName) : 'administrativeArea' }}');
  }
  });

  document.querySelector('select#{{ 'countryCode'|namespaceInputId(addressName) }}').dispatchEvent(new Event('change'));
{% endjs %}
