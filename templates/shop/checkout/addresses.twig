{% extends '/_layouts/main' %}

{% set addresses = craft.commerce.customers.customer.addresses %}

{% block content %}
  <!-- Template: {{ _self }}.twig -->
  <section class="grid">
    <div class="row">

      <div class="col col-xs-12 col-md-6 col-lg-5">
        {% include 'shop/checkout/_includes/order-summary' %}
      </div>

      <div class="col col-xs-12 col-md-6 col-lg-7">
        <div class="">
          <form method="post" action="" class="forms__checkout">
            {{ actionInput('commerce/cart/update-cart') }}
            {{ redirectInput('shop/checkout/shipping') }}
            {{ csrfInput() }}

            {% if not cart.email %}
              <label for="email">Email</label>
              <input id="email"
                class="input"
                type="email"
                value="{{ cart.email }}"
                name="email"
                placeholder="email@webiste.ch" />

              <span class="flash">
                {{ cart.getErrors('email')|join }}
              </span><br />
            {% endif %}

            {% include 'shop/_includes/addresses/fieldset' with {
              title: 'Versandadresse',
              class: 'ShippingAddress',
              name: 'shippingAddress'
            } %}

            {{ hiddenInput('billingAddressSameAsShipping', 0) }}

            <div class="mt-3">
              <label for="billingAddressSameAsShipping">
                <input id="billingAddressSameAsShipping"
                  name="billingAddressSameAsShipping"
                  type="checkbox"
                  checked="checked" />
                <span class="label-body">
                  Rechnungsadresse als Lieferadresse verwenden
                </span>
              </label>
            </div>

            <div class="mt-3">
              <label for="makePrimaryShippingAddress">
                <input id="makePrimaryShippingAddress"
                  name="makePrimaryShippingAddress"
                  type="checkbox" />
                <span class="label-body">
                  Als primäre Versandadresse verwenden
                </span>
              </label>
            </div>

            <div class="mt-3">
              {% include 'shop/_includes/addresses/fieldset' with {
                title: 'Rechnungsadresse',
                class: 'BillingAddress hidden',
                name: 'billingAddress'
              } %}
            </div>

            <div class="mt-3">
              <label for="makePrimaryBillingAddress">
                <input id="makePrimaryBillingAddress"
                  name="makePrimaryBillingAddress"
                  type="checkbox" />
                <span class="label-body">
                  Als primäre Rechnungsadresse verwenden
                </span>
              </label>
            </div>


          <div class="checkout__steps">
            <div class="checkout__steps--button">
              <input type="submit"
                class="input input__primary"
                value="Adresse bestätigen und weiter" />
            </div>
          </div>


          </form>
        </div>
      </div>


      <div class="checkout__steps">
        <div class="col col-xs-12 col-md-12 col-lg-12">

        </div>
      </div>

    </div>
  </section>

  {% js %}var $fieldsets = document.querySelectorAll('.js-address-fieldset');

  if ($fieldsets && $fieldsets.length) { $fieldsets.forEach(function (el) { var
  $addressSelects = el.querySelectorAll('.js-address-select');

  if ($addressSelects && $addressSelects.length) {
  $addressSelects.forEach(function(el) { var $radio =
  el.querySelector('.js-radio input'); var $body = el.querySelector('.js-body');

  if ($radio) { if ($body) { // Creating new address
  $radio.addEventListener('change', function(ev) { if (ev.target.checked) {
  $body.classList.remove('hidden'); } else { $body.classList.add('hidden'); }
  });

  if ($radio.checked) { $body.classList.remove('hidden'); } } else { //
  Selecting existing address $radio.addEventListener('change', function(ev) { if
  (ev.target.checked) { var $newBox =
  document.querySelector('.js-address-select[data-model-name="' +
  ev.target.dataset.modelName + '"]'); if ($newBox) {
  $newBox.querySelector('.js-body').classList.add('hidden'); } } }); } } }); }
  }); }

  var $billingSameAs = document.querySelector('#billingAddressSameAsShipping');
  if ($billingSameAs) { $billingSameAs.addEventListener('change', function(ev) {
  var $billingFieldSet =
  document.querySelector('.js-address-fieldset.BillingAddress');
  $billingFieldSet.classList.toggle('hidden'); });{% if
    (cart.billingAddressId and cart.billingAddress.hasErrors())
      or cart.billingAddressId != cart.shippingAddressId %}
    $billingSameAs.click();
  {% endif %}}{% endjs %}
{% endblock %}
